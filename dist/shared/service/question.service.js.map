{"version":3,"sources":["shared/service/question.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAAyC;AACzC,sCAA6C;AAG7C,uDAAmD;AAGnD;IAAqC,mCAAe;IAGhD,yBAAY,IAAU;eAClB,kBAAM,IAAI,CAAC;IACf,CAAC;IAED,sCAAY,GAAZ;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;aAClC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAC5C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAXQ,eAAe;QAD3B,iBAAU,EAAE;yCAIS,WAAI;OAHb,eAAe,CAY3B;IAAD,sBAAC;CAZD,AAYC,CAZoC,kCAAe,GAYnD;AAZY,0CAAe","file":"question.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from \"rxjs/Observable\";\nimport {QuestionCategory} from \"../models/models\";\nimport {AbstractService} from \"./abstract.service\";\n\n@Injectable()\nexport class QuestionService extends AbstractService {\n\n\n    constructor(http: Http) {\n        super(http);\n    }\n\n    getQuestions(): Observable<QuestionCategory[]> {\n        return this.http.get('/questions.json')\n            .map((response: Response) => response.json())\n            .catch(this.handleError);\n    }\n}\n"]}