{"version":3,"sources":["app.component.ts"],"names":[],"mappings":"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","file":"app.component.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {QuestionService} from \"./shared/service/question.service\";\nimport {QuestionCategory, Question, Group} from \"./shared/models/models\";\nimport {GroupService} from \"./shared/service/group.service\";\n\n@Component({\n    selector: 'quiz-app',\n    templateUrl: './app/app.component.html',\n    styleUrls: ['./app/app.component.css'],\n})\n\nexport class AppComponent implements OnInit {\n    questions: QuestionCategory[];\n    activeQuestion: Question;\n    lastTurn: number;\n    activeGroup: number;\n    groupSwitched: boolean = false;\n    groups: Group[];\n\n    constructor(private questionService: QuestionService, private groupService: GroupService) {\n    }\n\n    ngOnInit() {\n        if (this.loadGame()) {\n            return;\n        }\n        this.initializeGame();\n    }\n\n    selectQuestion(question: Question) {\n        if (question.answered) {\n            return;\n        }\n        this.activeQuestion = question;\n    }\n\n    switchGroup() {\n        this.activeGroup = this.activeGroup === 0 ? 1 : 0;\n        this.groupSwitched = true;\n    }\n\n    questionAnswered(data) {\n        if (data.correct) {\n            this.groups[this.activeGroup].score += (data.groupSwitched ? data.question.difficulty / 2 : data.question.difficulty);\n        }\n\n        data.question.answered = true;\n\n        this.activeGroup = this.lastTurn === 0 ? 1 : 0;\n        this.lastTurn = this.activeGroup;\n        this.activeQuestion = null;\n        this.groupSwitched = false;\n\n        this.saveGame();\n    }\n\n    jokerAvailable(type: string, group: number) {\n        if (!this.activeQuestion) {\n            return false;\n        }\n\n        if (this.activeQuestion.type !== 'choose') {\n            return false;\n        }\n\n        if (group !== this.activeGroup) {\n            return false;\n        }\n\n        if (this.groupSwitched) {\n            return false;\n        }\n\n        return this.groups[this.activeGroup][type];\n    }\n\n    setJoker(type: string, group: number) {\n        if (!this.jokerAvailable(type, group)) {\n            return;\n        }\n        this.groups[this.activeGroup][type]--;\n        this.activeQuestion.jokerInUse = true;\n\n        if (type === 'phone') {\n            return;\n        }\n\n        for (let answer of this.activeQuestion.answers) {\n            if (answer.fifty) {\n                continue;\n            }\n            answer.choosen = true;\n        }\n    }\n\n    private initializeGame() {\n        this.activeGroup = Math.floor(Math.random() * (1 + 1));\n        this.lastTurn = this.activeGroup;\n        this.activeQuestion = null;\n\n        this.questionService.getQuestions()\n            .subscribe(questions => {\n                this.questions = questions;\n                let id = 0,\n                    index = 1;\n                for (let category of this.questions) {\n                    for (let question of category.questions) {\n                        question.id = id;\n                        question.index = index;\n                        question.answered = false;\n\n                        id++;\n                        index++;\n                    }\n                    index = 1;\n                }\n                this.groupService.getGroups()\n                    .subscribe(groups => {\n                        this.groups = groups;\n\n                        this.saveGame();\n                    });\n            });\n    }\n\n    resetGame() {\n        localStorage.removeItem('questions');\n        localStorage.removeItem('lastTurn');\n        localStorage.removeItem('groups');\n        this.initializeGame();\n    }\n\n    private loadGame() {\n        let questions = localStorage.getItem('questions'),\n            lastTurn = localStorage.getItem('lastTurn'),\n            groups = localStorage.getItem('groups');\n\n        if (questions === null || lastTurn === null || groups === null) {\n            return false;\n        }\n\n        this.questions = JSON.parse(questions);\n        this.lastTurn = JSON.parse(lastTurn);\n        this.groups = JSON.parse(groups);\n        this.activeGroup = this.lastTurn;\n\n        return true;\n    }\n\n    private saveGame() {\n        localStorage.setItem('questions', JSON.stringify(this.questions));\n        localStorage.setItem('lastTurn', JSON.stringify(this.lastTurn));\n        localStorage.setItem('groups', JSON.stringify(this.groups));\n    }\n}\n"]}